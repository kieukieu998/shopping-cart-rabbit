04/06/2025 Introduction
- Tạo folder backend, frontend
- Chạy lệnh này ở frontend: npm create vite@latest ./ -- --template react
- Cài taiwind: https://v3.tailwindcss.com/docs/guides/vite
    + npm install -D tailwindcss postcss autoprefixer
    + npx tailwindcss init -p
- Tải font: google font
- React icon: https://react-icons.github.io/react-icons/
    + npm i react-router-dom react-icons

- Tải Sonner toast: npm install sonner
➤ image dummy: https://picsum.photos/images
- Cài react-paypal-js (checkout.jsx)
➤ React redux
npm i react-redux @reduxjs/toolkit axios


✅ FRONTENT: 
Giải thích:
➤ (1) Hàm loginUser dùng để:
- Gửi API POST /api/users/login kèm theo thông tin user (email, password).
Nếu thành công:
- Lưu user vào localStorage.
- Lưu token vào localStorage.
- Trả lại user để cập nhật vào Redux store.
Nếu thất bại:
- Trả về lỗi (error.response.data) thông qua rejectWithValue.
➤ addCase trong Redux Toolkit dùng để xử lý kết quả của các async action (như loginUser, registerUser) được tạo bởi createAsyncThunk.
tóm lại: Lắng nghe các trạng thái của async actions
➤ Khi nào addCase được gọi?
* Với mỗi createAsyncThunk, Redux Toolkit sẽ tự động tạo ra 3 trạng thái:
pending: 	Bắt đầu request	Gửi API → chưa phản hồi
fulfilled:	Thành công (API trả dữ liệu)	Gọi resolve()
rejected: 	Thất bại (API lỗi hoặc bị từ chối)	Gọi rejectWithValue()


======================================================
✅ BACKEND 
- npm init -y
- npm install express mongoose dotenv jsonwebtoken bcryptjs cors nodemon
➤ Dùng để cài đặt các thư viện Node.js cho backend. Cụ thể:
1. express:
- Framework giúp xây dựng server nhanh và đơn giản.
- Dùng để tạo các API route. 
ví dụ: 
app.get("/api/users", (req, res) => {
  res.send("Danh sách người dùng");
});
2. mongoose
- Dùng để kết nối và làm việc với MongoDB bằng JavaScript.
- Dễ định nghĩa model và thao tác dữ liệu.
 3. dotenv
- Dùng để quản lý biến môi trường trong file .env.
- Tránh lộ key nhạy cảm như DB URL, JWT_SECRET.
4. jsonwebtoken
- Tạo và kiểm tra mã JWT để xác thực người dùng.
5. bcryptjs
- Dùng để mã hóa mật khẩu khi lưu vào database.
6. cors
Cho phép backend nhận request từ frontend khác domain (CORS policy).
7. nodemon
- Công cụ dev giúp tự restart server mỗi lần bạn sửa file.
- Chỉ dùng khi lập trình, không dùng khi deploy.

Tóm lại: Lệnh này giúp bạn cài đầy đủ các công cụ cơ bản để xây dựng một backend Node.js với MongoDB, xác thực JWT, bảo mật và thuận tiện cho dev.
// ======================================================= //
//server.js
    const express = require("express");
    const cors = require("cors");
    const dotenv = require("dotenv");
    const connectDB = require("./config/db");

    const app = express();
    app.use(express.json());
    app.use(cors());

    dotenv.config();

    const PORT = process.env.PORT || 3000;

    // connect to MongoDB
    connectDB();

    app.get("/", (req,res) => {
        res.send("Welcome to rabbit api!");
    });

    app.listen(PORT, () => {
        console.log(`Severs is running on http://localhost:${PORT}`);
    })
// ======================================================= //
db.js
    const mongoose = require("mongoose");

    const connectDB = async () => {
        try{
            await mongoose.connect(process.env.MONGO_URL);
            console.log("MongoDB connected successfully");
        } catch(err) {
            console.error("MongoDB connected failed.", err);
            process.exit(1);
        }
    };

    module.exports = connectDB;
// ======================================================= //
.env
    PORT=9000
    MONGO_URL=
// ======================================================= //
https://cloudinary.com/  >>  Cloudinary dùng để làm gì?
✅ 1. Lưu trữ hình ảnh và video
Lưu trữ trên cloud thay vì local server
Có thể upload từ frontend hoặc backend
✅ 2. Tối ưu hình ảnh/video tự động
Tự động nén ảnh, giảm dung lượng nhưng giữ chất lượng
Tự chọn định dạng tốt nhất (WebP, AVIF, JPEG...)
Resize, crop, format ngay từ URL

>> CÀI ĐẶT TRONG .env xong thì chạy lệnh:
npm install multer cloudinary streamifier
// ======================================================= //
➤ toán tử điều kiện (ternary operator)
{isOpen ? a : b} >> điều_kiện ? giá_trị_nếu_đúng : giá_trị_nếu_sai

Props
➤ Component cha:
- Quản lý state + hàm xử lý: Dùng useState, useEffect, các hàm xử lý (toggle, submit, fetch, v.v.)
- Là component gọi hoặc render ra component khác.
- Quản lý state, truyền dữ liệu hoặc hàm điều khiển xuống component con bằng props.
➤ Component con:
- Là component nhận props từ cha: Dùng props để hiển thị UI hoặc gọi ngược lên cha khi cần (qua callback)
- Không tự giữ state (trừ khi cần), chủ yếu dùng props để hiển thị hoặc gọi ngược lên.
➤ <Outlet />
 "Mình muốn có layout chung (như header, navbar, footer...), và chỉ muốn phần nội dung chính thay đổi theo từng trang – thì chỗ cần thay là <Outlet />."

// FilterSidebar.jsx
➤ useSearchParams() là một React Hook đến từ thư viện react-router-dom, dùng để đọc và cập nhật query parameters (tham số truy vấn) trong URL
    - const [searchParams, setSearchParams] = useSearchParams();  
    - searchParams: Dùng để đọc giá trị tham số truy vấn
    - setSearchParams: Dùng để cập nhật query params trên URL
➤ useNavigate() là một React Hook của react-router-dom (v5.1+), được dùng để chuyển hướng (navigate) người dùng đến một URL mới trong ứng dụng — giống như window.location.href nhưng không reload trang.
- Khi nào dùng useNavigate()?
    - Khi bạn muốn chuyển hướng sau khi:
    - Người dùng đăng nhập/xuất.
    - Click một sản phẩm để xem chi tiết.
    - Submit form xong chuyển đến trang cảm ơn.
    - Hoặc đơn giản là click nút để đổi trang.
//params.material.split(","): tách chuỗi "cotton,polyester" thành mảng ["cotton", "polyester"] -- []: nếu không có material trong URL → mặc định là mảng rỗng